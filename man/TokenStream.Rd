% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TokenStream.R
\name{TokenStream}
\alias{TokenStream}
\title{An R6 class for manipulating/interrogating a stream of tokens.}
\description{
An R6 class for manipulating/interrogating a stream of tokens.

An R6 class for manipulating/interrogating a stream of tokens.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{named_values}}{the original tokens}

\item{\code{position}}{current stream position
Initialise a stream}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TokenStream$new()}}
\item \href{#method-reset}{\code{TokenStream$reset()}}
\item \href{#method-assert_within_range}{\code{TokenStream$assert_within_range()}}
\item \href{#method-check_within_range}{\code{TokenStream$check_within_range()}}
\item \href{#method-check_name_seq}{\code{TokenStream$check_name_seq()}}
\item \href{#method-assert_name_seq}{\code{TokenStream$assert_name_seq()}}
\item \href{#method-check_name}{\code{TokenStream$check_name()}}
\item \href{#method-assert_name}{\code{TokenStream$assert_name()}}
\item \href{#method-check_value_seq}{\code{TokenStream$check_value_seq()}}
\item \href{#method-assert_value_seq}{\code{TokenStream$assert_value_seq()}}
\item \href{#method-check_value}{\code{TokenStream$check_value()}}
\item \href{#method-assert_value}{\code{TokenStream$assert_value()}}
\item \href{#method-advance}{\code{TokenStream$advance()}}
\item \href{#method-read}{\code{TokenStream$read()}}
\item \href{#method-read_names}{\code{TokenStream$read_names()}}
\item \href{#method-read_values}{\code{TokenStream$read_values()}}
\item \href{#method-consume}{\code{TokenStream$consume()}}
\item \href{#method-end_of_stream}{\code{TokenStream$end_of_stream()}}
\item \href{#method-read_while}{\code{TokenStream$read_while()}}
\item \href{#method-consume_while}{\code{TokenStream$consume_while()}}
\item \href{#method-read_until}{\code{TokenStream$read_until()}}
\item \href{#method-consume_until}{\code{TokenStream$consume_until()}}
\item \href{#method-print}{\code{TokenStream$print()}}
\item \href{#method-clone}{\code{TokenStream$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$new(named_values)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{named_values}}{named vector of values
Reset stream to the given absolute position.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-reset"></a>}}
\if{latex}{\out{\hypertarget{method-reset}{}}}
\subsection{Method \code{reset()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$reset(position = 1L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{position}}{absolute position in stream. Default: 1 i.e. the start
Throw an error if a read is not within range}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-assert_within_range"></a>}}
\if{latex}{\out{\hypertarget{method-assert_within_range}{}}}
\subsection{Method \code{assert_within_range()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$assert_within_range(start, n)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{start, n}}{start position and number of values to read
Check if a read is not within range}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-check_within_range"></a>}}
\if{latex}{\out{\hypertarget{method-check_within_range}{}}}
\subsection{Method \code{check_within_range()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$check_within_range(start, n)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{start, n}}{start position and number of values to read}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
logical TRUE if values are within range of data
Check the next names match the name sequence specified
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-check_name_seq"></a>}}
\if{latex}{\out{\hypertarget{method-check_name_seq}{}}}
\subsection{Method \code{check_name_seq()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$check_name_seq(name_seq)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name_seq}}{Expected sequence of names
Assert the next names match the name sequence specified}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-assert_name_seq"></a>}}
\if{latex}{\out{\hypertarget{method-assert_name_seq}{}}}
\subsection{Method \code{assert_name_seq()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$assert_name_seq(name_seq)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name_seq}}{Expected sequence of names
Check the next name is one of the valid names specified}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-check_name"></a>}}
\if{latex}{\out{\hypertarget{method-check_name}{}}}
\subsection{Method \code{check_name()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$check_name(valid_names)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{valid_names}}{Valid names
Assert the next name is one of the valid names specified}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-assert_name"></a>}}
\if{latex}{\out{\hypertarget{method-assert_name}{}}}
\subsection{Method \code{assert_name()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$assert_name(valid_names)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{valid_names}}{Valid names
Check the next values match the value sequence specified}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-check_value_seq"></a>}}
\if{latex}{\out{\hypertarget{method-check_value_seq}{}}}
\subsection{Method \code{check_value_seq()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$check_value_seq(value_seq)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value_seq}}{Expected sequence of values
Assert the next values match the value sequence specified}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-assert_value_seq"></a>}}
\if{latex}{\out{\hypertarget{method-assert_value_seq}{}}}
\subsection{Method \code{assert_value_seq()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$assert_value_seq(value_seq)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value_seq}}{Expected sequence of values
Check the next value is one of the valid values specified}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-check_value"></a>}}
\if{latex}{\out{\hypertarget{method-check_value}{}}}
\subsection{Method \code{check_value()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$check_value(valid_values)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{valid_values}}{Valid values
Assert the next value is one of the valid values specified}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-assert_value"></a>}}
\if{latex}{\out{\hypertarget{method-assert_value}{}}}
\subsection{Method \code{assert_value()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$assert_value(valid_values)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{valid_values}}{Valid values
Advance the stream}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-advance"></a>}}
\if{latex}{\out{\hypertarget{method-advance}{}}}
\subsection{Method \code{advance()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$advance(n)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{number of tokens by which to advance the stream. May be
       negative. New position must be within range of the data
Read n named values from the given position}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-read"></a>}}
\if{latex}{\out{\hypertarget{method-read}{}}}
\subsection{Method \code{read()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$read(n, offset = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{number of values to read}

\item{\code{offset}}{offset from given position}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
named values at this position
Read n names from the given position
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-read_names"></a>}}
\if{latex}{\out{\hypertarget{method-read_names}{}}}
\subsection{Method \code{read_names()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$read_names(n, offset = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{number of values to read}

\item{\code{offset}}{offset from given position}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
names at this position
Read n values from the given position
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-read_values"></a>}}
\if{latex}{\out{\hypertarget{method-read_values}{}}}
\subsection{Method \code{read_values()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$read_values(n, offset = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{number of values to read}

\item{\code{offset}}{offset from given position}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
values at this position
Consume n tokens from the given position i.e. read and advance the stream
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-consume"></a>}}
\if{latex}{\out{\hypertarget{method-consume}{}}}
\subsection{Method \code{consume()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$consume(n)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{number of values to read}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
values starting at this position
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-end_of_stream"></a>}}
\if{latex}{\out{\hypertarget{method-end_of_stream}{}}}
\subsection{Method \code{end_of_stream()}}{
has end of stream been reached?
Consume tokens while some expression matches
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$end_of_stream()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-read_while"></a>}}
\if{latex}{\out{\hypertarget{method-read_while}{}}}
\subsection{Method \code{read_while()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$read_while(name = NULL, value = NULL, combine = "or")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name, value}}{the boundary of the consumption. if both name and
value are specified, then \code{combine} indicates how to logically
define the combination}

\item{\code{combine}}{logical operator value values: and, or
Consume tokens while some expression matches}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-consume_while"></a>}}
\if{latex}{\out{\hypertarget{method-consume_while}{}}}
\subsection{Method \code{consume_while()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$consume_while(name = NULL, value = NULL, combine = "or")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name, value}}{the boundary of the consumption. if both name and
value are specified, then \code{combine} indicates how to logically
define the combination}

\item{\code{combine}}{logical operator value values: and, or
Read until some expression matches}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-read_until"></a>}}
\if{latex}{\out{\hypertarget{method-read_until}{}}}
\subsection{Method \code{read_until()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$read_until(
  name = NULL,
  value = NULL,
  combine = "or",
  inclusive = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name, value}}{the boundary of the consumption. if both name and
value are specified, then \code{combine} indicates how to logically
define the combination}

\item{\code{combine}}{logical operator value values: and, or}

\item{\code{inclusive}}{should the end-point be included in the returned results?
       Default: TRUE.  If FALSE, then the end-point is not returned, and
       the stream position is set to *before* this end-point
Consume until some expression matches}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-consume_until"></a>}}
\if{latex}{\out{\hypertarget{method-consume_until}{}}}
\subsection{Method \code{consume_until()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$consume_until(
  name = NULL,
  value = NULL,
  combine = "or",
  inclusive = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name, value}}{the boundary of the consumption. if both name and
value are specified, then \code{combine} indicates how to logically
define the combination}

\item{\code{combine}}{logical operator value values: and, or}

\item{\code{inclusive}}{should the end-point be included in the returned results?
       Default: TRUE.  If FALSE, then the end-point is not returned, and
       the stream position is set to *before* this end-point
Print current state}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$print(n = 5)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{number of elements to print}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TokenStream$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
